=========================================================================================================================================================

ERC 20

If you've been in the Ethereum space for any amount of time, you've probably heard people talking about tokens â€” specifically ERC20 tokens.

A token on Ethereum is basically just a smart contract that follows some common rules â€”
namely it implements a standard set of functions that all other token contracts share, such as
transferFrom(address _from, address _to, uint256 _tokenId) and balanceOf(address _owner).

Internally the smart contract usually has a mapping, mapping(address => uint256) balances, that keeps track of how much balance each address has.
So basically a token is just a contract that keeps track of who owns how much of that token,
and some functions so those users can transfer their tokens to other addresses.

Since all ERC20 tokens share the same set of functions with the same names, they can all be interacted with in the same ways.
This means if you build an application that is capable of interacting with one ERC20 token, it's also capable of interacting with any ERC20 token.
That way more tokens can easily be added to your app in the future without needing to be custom coded.
You could simply plug in the new token contract address, and boom, your app has another token it can use.

One example of this would be an exchange. When an exchange adds a new ERC20 token, really it just needs to add another smart contract it talks to.
Users can tell that contract to send tokens to the exchange's wallet address, and the exchange can tell the contract
to send the tokens back out to users when they request a withdraw.
The exchange only needs to implement this transfer logic once, then when it wants to add a new ERC20 token,
it's simply a matter of adding the new contract address to its database.

=========================================================================================================================================================

ERC 721

ERC20 tokens are really cool for tokens that act like currencies. But they're not particularly useful for representing zombies in our zombie game.
For one, zombies aren't divisible like currencies â€” I can send you 0.237 ETH, but transfering you 0.237 of a zombie doesn't really make sense.
Secondly, all zombies are not created equal. Your Level 2 zombie "Steve" is totally not equal to my Level 732 zombie
"H4XF13LD MORRIS ðŸ’¯ðŸ’¯ðŸ˜ŽðŸ’¯ðŸ’¯". (Not even close, Steve).

There's another token standard that's a much better fit for crypto-collectibles like CryptoZombies â€” and they're called ERC721 tokens.
ERC721 tokens are not interchangeable since each one is assumed to be unique, and are not divisible.
You can only trade them in whole units, and each one has a unique ID. So these are a perfect fit for making our zombies tradeable.

Note that using a standard like ERC721 has the benefit that we don't have to implement the auction or escrow logic within our contract that
determines how players can trade / sell our zombies.

If we conform to the spec, someone else could build an exchange platform for crypto-tradable ERC721 assets,nand our ERC721 zombies
would be usable on that platform. So there are clear benefits to using a token standard instead of rolling your own trading logic.

=========================================================================================================================================================

When implementing a token contract, the first thing we do is copy the interface to its own Solidity file and import it, 

=========================================================================================================================================================


your contract can inherit from multiple contracts as follows:

contract SatoshiNakamoto is NickSzabo, HalFinney {
  // Omg, the secrets of the universe revealed!
}

=========================================================================================================================================================

balanceOf // This function simply takes an address, and returns how many tokens that address owns.

ownerOf // This function takes a token ID (in our case, a Zombie ID), and returns the address of the person who owns it.

=========================================================================================================================================================

can't have a modifier and a function with the same name.

=========================================================================================================================================================

Note that the ERC721 spec has 2 different ways to transfer tokens:

function transferFrom(address _from, address _to, uint256 _tokenId) external payable;       &
function approve(address _approved, uint256 _tokenId) external payable;

The first way is the token's owner calls transferFrom with his address as the _from parameter, the address he wants to transfer to as
the _to parameter, and the _tokenId of the token he wants to transfer.

The second way is the token's owner first calls approve with the address he wants to transfer to, and the _tokenID.
The contract then stores who is approved to take a token, usually in a mapping (uint256 => address).
Then, when the owner or the approved address calls transferFrom, the contract checks if that msg.sender is the owner or is approved by
the owner to take the token, and if so it transfers the token to him.

=========================================================================================================================================================

event / emit

=========================================================================================================================================================

address 0 (which is called "burning" a token 

basically it's sent to an address that no one has the private key of, essentially making it unrecoverable)

=========================================================================================================================================================

OpenZeppelin ERC721 - std implementation

=========================================================================================================================================================

UNDERFLOWS & OVERFLOWS

We're going to look at one major security feature you should be aware of when writing smart contracts: Preventing overflows and underflows.
In this case, we've caused it to overflow â€” so number is counterintuitively now equal to 0 even though we increased it.
(If you add 1 to binary 11111111, it resets back to 00000000, like a clock going from 23:59 to 00:00).

An underflow is similar, where if you subtract 1 from a uint8 that equals 0, it will now equal 255 (because uints are unsigned, and cannot be negative).
To prevent this, OpenZeppelin has created a library called SafeMath that prevents these issues by default.

=========================================================================================================================================================

A library is a special type of contract in Solidity. One of the things it is useful for is to attach functions to native data types.

add sub div mul

First we have the library keyword â€” libraries are similar to contracts but with a few differences.
For our purposes, libraries allow us to use the using keyword, which automatically tacks on all of the library's methods to another data type:

=========================================================================================================================================================

ASSERT VS REQUIRE

assert is similar to require, where it will throw an error if false.

The difference between assert and require is that require will refund the user the rest of their gas when a function fails,
whereas assert will not. So most of the time you want to use require in your code;

assert is typically used when something has gone horribly wrong with the code (like a uint overflow).

=========================================================================================================================================================

simply put, SafeMath's add, sub, mul, and div are functions that do the basic 4 math operations, but throw an error if an overflow or underflow occurs.

=========================================================================================================================================================

We should prevent overflows here as well just to be safe.
(It's a good idea in general to just use SafeMath instead of the basic math operations.
Maybe in a future version of Solidity these will be implemented by default, but for now we have to take extra security precautions in our code).

This means we're going to need to implement 2 more libraries to prevent overflow/underflows with our uint16s and uint32s.
We can call them SafeMath16 and SafeMath32.

=========================================================================================================================================================

NATSPEC

/// @title A contract for basic math operations
/// @author H4XF13LD MORRIS ðŸ’¯ðŸ’¯ðŸ˜ŽðŸ’¯ðŸ’¯
/// @notice For now, this contract just adds a multiply function
contract Math {
  /// @notice Multiplies 2 numbers together
  /// @param x the first uint.
  /// @param y the second uint.
  /// @return z the product of (x * y)
  /// @dev This function does not currently check for overflows
  function multiply(uint x, uint y) returns (uint z) {
    // This is just a normal comment, and won't get picked up by natspec
    z = x * y;
  }
}

@title and @author are straightforward.

@notice explains to a user what the contract / function does. @dev is for explaining extra details to developers.

@param and @return are for describing what each parameter and return value of a function are for.

Note that you don't always have to use all of these tags for every function â€” all tags are optional.
But at the very least, leave a @dev note explaining what each function does.

=========================================================================================================================================================
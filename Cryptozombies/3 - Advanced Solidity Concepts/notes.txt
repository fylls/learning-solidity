=========================================================================================================================================================

after you deploy a contract to Ethereum, it’s immutable, which means that it can never be modified or updated again.

The initial code you deploy to a contract is there to stay, permanently, on the blockchain.
This is one reason security is such a huge concern in Solidity.
If there's a flaw in your contract code, there's no way for you to patch it later.
You would have to tell your users to start using a different smart contract address that has the fix.

But this is also a feature of smart contracts. The code is law.
If you read the code of a smart contract and verify it, you can be sure thatevery time you call a function it's going to do exactly what
the code says it will do. No one can later change that function and give you unexpected results.

=========================================================================================================================================================

// Updatable ETH address //

In Lesson 2, we hard-coded the CryptoKitties contract address into our DApp.
But what would happen if the CryptoKitties contract had a bug and someone destroyed all the kitties?

It's unlikely, but if this did happen it would render our DApp completely useless.
our DApp would point to a hardcoded address that no longer returned any kitties.
Our zombies would be unable to feed on kitties, and we'd be unable to modify our contract to fix it.

For this reason, it often makes sense to have functions that will allow you to update key portions of the DApp.

For example, instead of hard coding the CryptoKitties contract address into our DApp, we should probably have a
setKittyContractAddress function that lets us change this address in the future in case something happens to the CryptoKitties contract.

=========================================================================================================================================================

// onlyOwner modifier //

cannot be EXTERNAL, anyone can call it!
That means anyone who called the function could change the address of the CryptoKitties contract, and break our app for all its users.

To handle cases like this, one common practice that has emerged is to make contracts Ownable —
meaning they have an owner (you) who has special privileges.

=========================================================================================================================================================

constructor() is a constructor, which is an optional special function that has the same name as the contract.
It will get executed only one time, when the contract is first created.

=========================================================================================================================================================

modifier onlyOwner()  Modifiers are kind of half-functions that are used to modify other functions,
usually to check some requirements prior to execution.

=========================================================================================================================================================

Now that our base contract ZombieFactory inherits from Ownable, we can use the onlyOwner function modifier in ZombieFeeding as well.

This is because of how contract inheritance works. Remember:

ZombieFeeding is ZombieFactory
ZombieFactory is Ownable

=========================================================================================================================================================

Notice the onlyOwner modifier on the renounceOwnership function. When you call renounceOwnership, the code inside onlyOwner executes first.
Then when it hits the _; statement in onlyOwner, it goes back and executes the code inside renounceOwnership.
So while there are other ways you can use modifiers, one of the most common use-cases is to add a quick require check before a function executes.

=========================================================================================================================================================

In the case of onlyOwner, adding this modifier to a function makes it so only the owner of the contract(you, if you deployed it) can call that function.

Note: Giving the owner special powers over the contract like this is often necessary, but it could also be used maliciously.
For example, the owner could add a backdoor function that would allow him to transfer anyone's zombies to himself!

So it's important to remember that just because a DApp is on Ethereum does not automatically mean it's decentralized —
you have to actually read the full source code to make sure it's free of special controls by the owner that you need to potentially worry about.

There's a careful balance as a developer between maintaining control over a DApp such that you can fix potential bugs,
and building an owner-less platform that your users can trust to secure their data

=========================================================================================================================================================

GAS — the fuel Ethereum DApps run on

In Solidity, your users have to pay every time they execute a function on your DApp using a currency called gas.
Users buy gas with Ether (the currency on Ethereum), so your users have to spend ETH in order to execute functions on your DApp.

How much gas is required to execute a function depends on how complex that function's logic is.
Each individual operation has a gas cost based roughly on how much computing resources will be required to perform that operation
(e.g. writing to storage is much more expensive than adding two integers).

The total gas cost of your function is the sum of the gas costs of all its individual operations.

Because running functions costs real money for your users, code optimization is much more important in Ethereum than in other programming languages.
If your code is sloppy, your users are going to have to pay a premium to execute your functions 
and this could add up to millions of dollars in unnecessary fees across thousands of users.


Ethereum is like a big, slow, but extremely secure computer. When you execute a function, every single node on the network needs to run that
same function to verify its output — thousands of nodes verifying every function execution is what makes Ethereum decentralized,
and its data immutable and censorship-resistant.


The creators of Ethereum wanted to make sure someone couldn't clog up the network with an infinite loop, or hog all the network resources with
really intensive computations. So they made it so transactions aren't free, and users have to pay for computation time as well as storage.

=========================================================================================================================================================

UINT

Normally there's no benefit to using these sub-types because Solidity reserves 256 bits of storage regardless of the uint size.
For example, using uint8 instead of uint (uint256) won't save you any gas.
But there's an exception to this: inside structs.

If you have multiple uints inside a struct, using a smaller-sized uint when possible will allow Solidity to pack these variables
together to take up less storage.For this reason, inside a struct you'll want to use the smallest integer sub-types you can get away with.

You'll also want to cluster identical data types together (i.e. put them next to each other in the struct) so that Solidity can minimize the
required storage space. For example, a struct with fields uint c; uint32 a; uint32 b; will cost less gas than a
struct with fields uint32 a; uint c; uint32 b; because the uint32 fields are clustered together.

=========================================================================================================================================================

Note: Unix time is traditionally stored in a 32-bit number. 

This will lead to the "Year 2038" problem, when 32-bit unix timestamps will overflow and break a lot of legacy systems.
So if we wanted our DApp to keep running 20 years from now, we could use a 64-bit number instead,
but our users would have to spend more gas to use our DApp in the meantime. Design decisions!

=========================================================================================================================================================

function _doStuff(Zombie storage _zombie) internal {
  // do stuff with _zombie
}

This way we can pass a reference to our zombie into a function instead of passing in a zombie ID and looking it up.

=========================================================================================================================================================
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   SUPER IMPORTANT   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

An important security practice is to examine all your public and external functions, and try to think of ways users might abuse them. Remember —
unless these functions have a modifier like onlyOwner, any user can call them and pass them any data they want to.

=========================================================================================================================================================

Currently feedAndMultiply is a public function. Let's make it internal so that the contract is more secure.
We don't want users to be able to call this function with any DNA they want.

=========================================================================================================================================================

Note: calldata is somehow similar to memory, but it's only available to external functions.

=========================================================================================================================================================

This function will only need to read data from the blockchain, so we can make it a view function.
Which brings us to an important topic when talking about gas optimization:
view functions don't cost any gas when they're called externally by a user.

you can optimize your DApp's gas usage for your users by using read-only external view functions wherever possible.

Note: If a view function is called internally from another function in the same contract that is not a view function, it will still cost gas.
This is because the other function creates a transaction on Ethereum, and will still need to be verified from every node.
So view functions are only free when they're called externally.

=========================================================================================================================================================

Storage is Expensive

One of the more expensive operations in Solidity is using storage — particularly writes.
This is because every time you write or change a piece of data, it’s written permanently to the blockchain.
Forever! Thousands of nodes across the world need to store that data on their hard drives,
and this amount of data keeps growing over time as the blockchain grows. So there's a cost to doing that.

You can use the memory keyword with arrays to create a new array inside a function without needing to write anything to storage. 
The array will only exist until the end of the function call, and this is a lot cheaper gas-wise than updating an array in storage 
free if it's a view function called externally.

Note: memory arrays must be created with a length argument (in this example, 3).
They currently cannot be resized like storage arrays can with array.push(), although this may be changed in a future version of Solidity.

sometimes you'll want to use a for loop to build the contents of an array in a function rather than simply saving that array to storage.

=========================================================================================================================================================